# Collect any enviromental variables that are set in /etc/sysconfig/httpd
# Collect the dispatchers number
PassEnv DISP_ID

<VirtualHost *:80>
	ServerName	publish
	# Put names of which domains are used for your published site/content here
	ServerAlias	${PUBLISH_DEFAULT_HOSTNAME}
	# Use a doc root that matches what's in the /etc/httpd/conf/publish-farm.any
	DocumentRoot	${PUBLISH_DOCROOT}
	# Add header breadcrumbs for help in troubleshooting
	<IfModule mod_headers.c>
      ################## Start of CORS configuration ##################

       SetEnvIfExpr "req_novary('Origin') == ''" CORSType=none CORSProcessing=false
       SetEnvIfExpr "req_novary('Origin') != ''" CORSType=cors CORSProcessing=true CORSTrusted=false

       SetEnvIfExpr "req_novary('Access-Control-Request-Method') == '' && %{REQUEST_METHOD} == 'OPTIONS' && req_novary('Origin') != ''" CORSType=invalidpreflight CORSProcessing=false
       SetEnvIfExpr "req_novary('Access-Control-Request-Method') != '' && %{REQUEST_METHOD} == 'OPTIONS' && req_novary('Origin') != ''" CORSType=preflight CORSProcessing=true CORSTrusted=false
       SetEnvIfExpr "req_novary('Origin') -strcmatch '%{REQUEST_SCHEME}://%{HTTP_HOST}*'" CORSType=samedomain CORSProcessing=false

       # For requests that require CORS processing, check if the Origin can be trusted
       SetEnvIfExpr "%{HTTP_HOST} =~ /(.*)/ " ParsedHost=$1

       ################## Adapt regex to match CORS origin(s) for your environment
        SetEnvIfExpr "env('CORSProcessing') == 'true' && req_novary('Origin') =~ m#(https://.*\.example\.com$)#" CORSTrusted=true
        SetEnvIfExpr "env('CORSProcessing') == 'true' && req_novary('Origin') =~ m#(http://localhost(:\d+)?$)#" CORSTrusted=true

       # Extract the Origin header
       SetEnvIfNoCase ^Origin$ ^(.*)$ CORSTrustedOrigin=$1

       # Flush If already set
       Header unset Access-Control-Allow-Origin
       Header unset Access-Control-Allow-Credentials

       # Trusted
       Header always set Access-Control-Allow-Credentials "true" "expr=reqenv('CORSTrusted') == 'true'"
       Header always set Access-Control-Allow-Origin "%{CORSTrustedOrigin}e" "expr=reqenv('CORSTrusted') == 'true'"
       Header always set Access-Control-Allow-Methods "GET" "expr=reqenv('CORSTrusted') == 'true'"
       Header always set Access-Control-Max-Age 1800 "expr=reqenv('CORSTrusted') == 'true'"
       Header always set Access-Control-Allow-Headers "Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers" "expr=reqenv('CORSTrusted') == 'true'"

       # Non-CORS or Not Trusted
       Header unset Access-Control-Allow-Credentials "expr=reqenv('CORSProcessing') == 'false' || reqenv('CORSTrusted') == 'false'"
       Header unset Access-Control-Allow-Origin "expr=reqenv('CORSProcessing') == 'false' || reqenv('CORSTrusted') == 'false'"
       Header unset Access-Control-Allow-Methods "expr=reqenv('CORSProcessing') == 'false' || reqenv('CORSTrusted') == 'false'"
       Header unset Access-Control-Max-Age "expr=reqenv('CORSProcessing') == 'false' || reqenv('CORSTrusted') == 'false'"

       # Always vary on origin, even if its not there.
       Header merge Vary Origin

       # CORS - send 204 for CORS requests which are not trusted
       RewriteCond expr "reqenv('CORSProcessing') == 'true' && reqenv('CORSTrusted') == 'false'"
       RewriteRule "^(.*)" - [R=204,L]

       # Remove Origin before sending to AEM Publish if this configuration handles the CORS
       RequestHeader unset Origin "expr=reqenv('CORSTrusted') == 'true'"

       ################## End of CORS configuration ##################

		Header always add X-Dispatcher ${DISP_ID}
		Header always add X-Vhost "publish"
		Header merge X-Frame-Options SAMEORIGIN "expr=%{resp:X-Frame-Options}!='SAMEORIGIN'"
		Header merge X-Content-Type-Options nosniff "expr=%{resp:X-Content-Type-Options}!='nosniff'"
	</IfModule>
	<Directory "${PUBLISH_DOCROOT}">
		# Update /etc/sysconfig/httpd with setting the PUBLISH_ALLOWLIST_ENABLED from 0 or 1 to enable or disable ip restriction rules
		<If "${PUBLISH_ALLOWLIST_ENABLED} == 1">
			Include conf.d/allowlists/*_allowlist.rules
		</If>
		<IfModule disp_apache2.c>
			# Some items cache with the wrong mime type
			# Use this option to use the name to auto-detect mime types when cached improperly
			ModMimeUsePathInfo On
			# Use this option to avoid cache poisioning
			# Sling will return /content/image.jpg as well as /content/image.jpg/ but apache can't search /content/image.jpg/ as a file
			# Apache will treat that like a directory.  This assures the last slash is never stored in cache
			DirectorySlash Off
			# Enable the dispatcher file handler for apache to fetch files from AEM
			SetHandler dispatcher-handler
		</IfModule>
		Options FollowSymLinks
		AllowOverride None
		Require all granted
		# Insert filter
		SetOutputFilter DEFLATE
		# Don't compress images
		SetEnvIfNoCase Request_URI \
		\.(?:gif|jpe?g|png)$ no-gzip dont-vary
	</Directory>
	<IfModule disp_apache2.c>
		# Enabled to allow rewrites to take affect and not be ignored by the dispatcher module
		DispatcherUseProcessedURL	1
		# Default setting to allow all errors to come from the aem instance
		DispatcherPassError		0
	</IfModule>
	<IfModule mod_rewrite.c>
		ReWriteEngine	on
		LogLevel warn rewrite:info
		# Global rewrite include
		Include conf.d/rewrites/base_rewrite.rules
		Include conf.d/rewrites/amr-test-37_rewrite.rules
		# Update /etc/sysconfig/httpd with setting the PUBLISH_FORCE_SSL from 0 or 1 to enable or disable enforcing SSL
		<If "${PUBLISH_FORCE_SSL} == 1">
			Include conf.d/rewrites/xforwarded_forcessl_rewrite.rules
		</If>
	</IfModule>
	<IfModule mod_proxy.c>
		SSLProxyEngine on
		Include /etc/httpd/conf.d/proxy/*.proxy
	</IfModule>
</VirtualHost>
